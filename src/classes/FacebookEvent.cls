//
// Generated by JSON2Apex http://json2apex.herokuapp.com/
//

public class FacebookEvent {
	public class Venue {
		public String street {get;set;}
		public String city {get;set;}
		public String state {get;set;}
		public String country {get;set;}

		public Venue(JSONParser parser) {
			while (parser.nextToken() != JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != JSONToken.VALUE_NULL) {
						if (text == 'street') {
							street = parser.getText();
						} else if (text == 'city') {
							city = parser.getText();
						} else if (text == 'state') {
							state = parser.getText();
						} else if (text == 'country') {
							country = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'Venue consuming unrecognized property: '+text);
							FacebookUtil.consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public String id {get;set;}
	public FacebookRef owner {get;set;}
	public String name {get;set;}
	public String description {get;set;}
	public String start_time {get;set;}
	public String end_time {get;set;}
	public String location {get;set;}
	public Venue venue {get;set;}
	public String privacy {get;set;}
	public String updated_time {get;set;}
	public String rsvp_status {get;set;}
	public String type {get;set;}

	public FacebookEvent(JSONParser parser) {
		while (parser.nextToken() != JSONToken.END_OBJECT) {
			if (parser.getCurrentToken() == JSONToken.FIELD_NAME) {
				String text = parser.getText();
				if (parser.nextToken() != JSONToken.VALUE_NULL) {
					if (text == 'id') {
						id = parser.getText();
					} else if (text == 'owner') {
						owner = new FacebookRef(parser);
					} else if (text == 'name') {
						name = parser.getText();
					} else if (text == 'description') {
						description = parser.getText();
					} else if (text == 'start_time') {
						start_time = parser.getText();
					} else if (text == 'end_time') {
						end_time = parser.getText();
					} else if (text == 'location') {
						location = parser.getText();
					} else if (text == 'venue') {
						venue = new Venue(parser);
					} else if (text == 'privacy') {
						privacy = parser.getText();
					} else if (text == 'updated_time') {
						updated_time = parser.getText();
					} else if (text == 'type') {
						type = parser.getText();
						if (!type.equals('event')) {
							throw new FacebookException('FacebookEvent found object type '+type+' - expected event');
						}
					} else if (text == 'rsvp_status') {
						rsvp_status = parser.getText();
					} else {
						System.debug(LoggingLevel.WARN, 'FacebookEvent consuming unrecognized property: '+text);
						FacebookUtil.consumeObject(parser);
					}
				}
			}
		}
	}
	
	public FacebookEvent(String accessToken, String id, Map<String, String> params) {
		this(System.JSON.createParser(FacebookUtil.get(accessToken, id, params)));
	}
	
	public FacebookEvent(String accessToken, String id) {
		this(accessToken, id, null);
	}
	
	public static FacebookEvent parse(String json) {
		return new FacebookEvent(System.JSON.createParser(json));
	}
	
	// This test method should give 100% coverage
	static testMethod void testParse() {
		String json = '{'+
		'  \"id\": \"331218348435\",'+
		'  \"owner\": {'+
		'    \"name\": \"Julia Lam\",'+
		'    \"id\": \"2503747\"'+
		'  },'+
		'  \"name\": \"Facebook Developer Garage Austin - SXSW Edition\",'+
		'  \"description\": \"Join the Facebook team and local developers for a deep dive into the latest and most exciting ways developers are building with Facebook technologies. \\n\\nCome to learn, stay to make friends!\\n\\nTentative Agenda:\\n2:00 - 2:30 PM - Registration\\n2:30 - 3:30 PM - Learn the latest from Facebook and local developers\\n3:30 - 5:30 PM - Drink with friends! Stay and mingle with your developer community.\\n\\n*Come early! Drink tickets and t-shirts provided to the first 300 attendees. Cash bar provided for all attendees.\\n\\nTopics & Speakers:\\n--Multi-Platform Social Games (Gareth Davis, Facebook) \\n--Increasing Mobile Engagement with Facebook Connect (Josh Williams, Gowalla)\\n--Facebook Integration with Seesmic (or How to Build Community Using Octopus Balls...) (John Yamasaki, Seesmic)\\n--Going multi-platform: the brave new world beyond facebook.com (Sebastien de Halleux, Playfish / EA Interactive)\\n--Socially Connected Exploding Gems Everywhere...Excellent! (Jon David, PopCap Games)\\n\\n* Emceed by Austin local: whurley, Chaotic Moon Studios\\n* All are welcome to attend, no badge is required.\\n* If you can\'t make it in person, you can join the live stream, beginning at 2:00 PM CST, here: http://ustream.tv/fbplatform \\n\\n***DAYLIGHT SAVINGS STARTS SUNDAY AT 2 AM, PLEASE ADJUST YOUR CLOCKS ACCORDINGLY***\",'+
		'  \"start_time\": \"2010-03-14T14:00:00\",'+
		'  \"end_time\": \"2010-03-14T17:30:00\",'+
		'  \"location\": \"The Phoenix\",'+
		'  \"venue\": {'+
		'    \"street\": \"409 Colorado St.\",'+
		'    \"city\": \"Austin\",'+
		'    \"state\": \"Texas\",'+
		'    \"country\": \"United States\"'+
		'  },'+
		'  \"privacy\": \"OPEN\",'+
		'  \"updated_time\": \"2010-04-13T15:29:40+0000\",'+
		'  \"rsvp_status\": \"unsure\",'+
		'  \"type\": \"event\"'+
		'}';
		FacebookEvent r = parse(json);
		System.assert(r != null);
		System.assert(r.id != null);
		System.assert(r.owner != null);
		System.assert(r.name != null);
		System.assert(r.description != null);
		System.assert(r.start_time != null);
		System.assert(r.end_time != null);
		System.assert(r.location != null);
		System.assert(r.venue != null);
		System.assert(r.privacy != null);
		System.assert(r.updated_time != null);
		System.assert(r.type != null);

		FacebookUtil.testmode = true;
		FacebookUtil.teststubresponse = json;
		r = new FacebookEvent('TEST', 'TEST');
		System.assert(r != null);
		System.assert(r.id != null);
		System.assert(r.owner != null);
		System.assert(r.name != null);
		System.assert(r.description != null);
		System.assert(r.start_time != null);
		System.assert(r.end_time != null);
		System.assert(r.location != null);
		System.assert(r.venue != null);
		System.assert(r.privacy != null);
		System.assert(r.updated_time != null);
		System.assert(r.type != null);

		json = '{\"type\": \"test\" }';
		try {
			FacebookEvent objRoot = new FacebookEvent(System.JSON.createParser(json));
			System.assert(false);
		} catch (FacebookException fbe) {
			System.assertEquals(fbe.getMessage(), 'FacebookEvent found object type test - expected event');
		}

		json = '{\"TestAMissingObject\": { \"TestAMissingArray\": [ { \"TestAMissingProperty\": \"Some Value\" } ] } }';
		Venue objVenue = new Venue(System.JSON.createParser(json));
		System.assert(objVenue != null);
		System.assert(objVenue.street == null);
		System.assert(objVenue.city == null);
		System.assert(objVenue.state == null);
		System.assert(objVenue.country == null);

		json = '{\"TestAMissingObject\": { \"TestAMissingArray\": [ { \"TestAMissingProperty\": \"Some Value\" } ] } }';
		FacebookEvent objRoot = new FacebookEvent(System.JSON.createParser(json));
		System.assert(objRoot != null);
		System.assert(objRoot.id == null);
		System.assert(objRoot.owner == null);
		System.assert(objRoot.name == null);
		System.assert(objRoot.description == null);
		System.assert(objRoot.start_time == null);
		System.assert(objRoot.end_time == null);
		System.assert(objRoot.location == null);
		System.assert(objRoot.venue == null);
		System.assert(objRoot.privacy == null);
		System.assert(objRoot.updated_time == null);
		System.assert(objRoot.type == null);
	}
}