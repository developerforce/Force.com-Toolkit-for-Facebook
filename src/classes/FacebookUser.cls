//
// Generated by JSON2Apex http://json2apex.herokuapp.com/
//

public class FacebookUser {
	public class Projects {
		public String id {get;set;}
		public String name {get;set;}
		public List<FacebookRef> with {get;set;}
		public String description {get;set;}
		public String start_date {get;set;}
		public String end_date {get;set;}

		public Projects(JSONParser parser) {
			while (parser.nextToken() != JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != JSONToken.VALUE_NULL) {
						if (text == 'id') {
							id = parser.getText();
						} else if (text == 'name') {
							name = parser.getText();
						} else if (text == 'with') {
							with = new List<FacebookRef>();
							while (parser.nextToken() != JSONToken.END_ARRAY) {
								with.add(new FacebookRef(parser));
							}
						} else if (text == 'description') {
							description = parser.getText();
						} else if (text == 'start_date') {
							start_date = parser.getText();
						} else if (text == 'end_date') {
							end_date = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'Projects consuming unrecognized property: '+text);
							FacebookUtil.consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Education {
		public FacebookRef school {get;set;}
		public FacebookRef year {get;set;}
		public String type {get;set;}
		public List<FacebookRef> concentration {get;set;}
		public FacebookRef degree {get;set;}
		public List<Classes> classes {get;set;}

		public Education(JSONParser parser) {
			while (parser.nextToken() != JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != JSONToken.VALUE_NULL) {
						if (text == 'school') {
							school = new FacebookRef(parser);
						} else if (text == 'year') {
							year = new FacebookRef(parser);
						} else if (text == 'type') {
							type = parser.getText();
						} else if (text == 'concentration') {
							concentration = new List<FacebookRef>();
							while (parser.nextToken() != JSONToken.END_ARRAY) {
								concentration.add(new FacebookRef(parser));
							}
						} else if (text == 'degree') {
							degree = new FacebookRef(parser);
						} else if (text == 'classes') {
							classes = new List<Classes>();
							while (parser.nextToken() != JSONToken.END_ARRAY) {
								classes.add(new Classes(parser));
							}
						} else {
							System.debug(LoggingLevel.WARN, 'Education consuming unrecognized property: '+text);
							FacebookUtil.consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Classes {
		public String id {get;set;}
		public String name {get;set;}
		public List<FacebookRef> with {get;set;}
		public String description {get;set;}

		public Classes(JSONParser parser) {
			while (parser.nextToken() != JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != JSONToken.VALUE_NULL) {
						if (text == 'id') {
							id = parser.getText();
						} else if (text == 'name') {
							name = parser.getText();
						} else if (text == 'with') {
							with = new List<FacebookRef>();
							while (parser.nextToken() != JSONToken.END_ARRAY) {
								with.add(new FacebookRef(parser));
							}
						} else if (text == 'description') {
							description = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'Classes consuming unrecognized property: '+text);
							FacebookUtil.consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class VideoUploadLimits {
		public Integer length {get;set;}
		public Integer size {get;set;}

		public VideoUploadLimits(JSONParser parser) {
			while (parser.nextToken() != JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != JSONToken.VALUE_NULL) {
						if (text == 'length') {
							length = parser.getIntegerValue();
						} else if (text == 'size') {
							size = parser.getIntegerValue();
						} else {
							System.debug(LoggingLevel.WARN, 'Video_upload_limits consuming unrecognized property: '+text);
							FacebookUtil.consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public String id {get;set;}
	public String name {get;set;}
	public String first_name {get;set;}
	public String middle_name {get;set;}
	public String last_name {get;set;}
	public String link {get;set;}
	public String username {get;set;}
	public String third_party_id {get;set;}
	public String birthday {get;set;}
	public FacebookRef hometown {get;set;}
	public List<String> interested_in {get;set;}
	public FacebookRef location {get;set;}
	public String bio {get;set;}
	public String quotes {get;set;}
	public List<Work> work {get;set;}
	public List<Education> education {get;set;}
	public String email {get;set;}
	public String gender {get;set;}
	public String relationship_status {get;set;}
	public FacebookRef significant_other {get;set;}
	public String religion {get;set;}
	public String political {get;set;}
	public List<FacebookRef> favorite_athletes {get;set;}
	public List<FacebookRef> favorite_teams {get;set;}
	public String website {get;set;}
	public Integer timezone {get;set;}
	public String locale {get;set;}
	public List<FacebookRef> languages {get;set;}
	public Boolean verified {get;set;}
	public String updated_time {get;set;}
	public VideoUploadLimits video_upload_limits {get;set;}
	public String type {get;set;}

	public FacebookUser(JSONParser parser) {
		while (parser.nextToken() != JSONToken.END_OBJECT) {
			if (parser.getCurrentToken() == JSONToken.FIELD_NAME) {
				String text = parser.getText();
				if (parser.nextToken() != JSONToken.VALUE_NULL) {
					if (text == 'id') {
						id = parser.getText();
					} else if (text == 'name') {
						name = parser.getText();
					} else if (text == 'first_name') {
						first_name = parser.getText();
					} else if (text == 'middle_name') {
						middle_name = parser.getText();
					} else if (text == 'last_name') {
						last_name = parser.getText();
					} else if (text == 'link') {
						link = parser.getText();
					} else if (text == 'username') {
						username = parser.getText();
					} else if (text == 'third_party_id') {
						third_party_id = parser.getText();
					} else if (text == 'birthday') {
						birthday = parser.getText();
					} else if (text == 'hometown') {
						hometown = new FacebookRef(parser);
					} else if (text == 'interested_in') {
						interested_in = new List<String>();
						while (parser.nextToken() != JSONToken.END_ARRAY) {
							interested_in.add(parser.getText());
						}
					} else if (text == 'location') {
						location = new FacebookRef(parser);
					} else if (text == 'bio') {
						bio = parser.getText();
					} else if (text == 'quotes') {
						quotes = parser.getText();
					} else if (text == 'work') {
						work = new List<Work>();
						while (parser.nextToken() != JSONToken.END_ARRAY) {
							work.add(new Work(parser));
						}
					} else if (text == 'education') {
						education = new List<Education>();
						while (parser.nextToken() != JSONToken.END_ARRAY) {
							education.add(new Education(parser));
						}
					} else if (text == 'email') {
						email = parser.getText();
					} else if (text == 'gender') {
						gender = parser.getText();
					} else if (text == 'relationship_status') {
						relationship_status = parser.getText();
					} else if (text == 'significant_other') {
						significant_other = new FacebookRef(parser);
					} else if (text == 'religion') {
						religion = parser.getText();
					} else if (text == 'political') {
						political = parser.getText();
					} else if (text == 'favorite_athletes') {
						favorite_athletes = new List<FacebookRef>();
						while (parser.nextToken() != JSONToken.END_ARRAY) {
							favorite_athletes.add(new FacebookRef(parser));
						}
					} else if (text == 'favorite_teams') {
						favorite_teams = new List<FacebookRef>();
						while (parser.nextToken() != JSONToken.END_ARRAY) {
							favorite_teams.add(new FacebookRef(parser));
						}
					} else if (text == 'website') {
						website = parser.getText();
					} else if (text == 'timezone') {
						timezone = parser.getIntegerValue();
					} else if (text == 'locale') {
						locale = parser.getText();
					} else if (text == 'languages') {
						languages = new List<FacebookRef>();
						while (parser.nextToken() != JSONToken.END_ARRAY) {
							languages.add(new FacebookRef(parser));
						}
					} else if (text == 'verified') {
						verified = parser.getBooleanValue();
					} else if (text == 'updated_time') {
						updated_time = parser.getText();
					} else if (text == 'video_upload_limits') {
						video_upload_limits = new VideoUploadLimits(parser);
					} else if (text == 'type') {
						type = parser.getText();
						if (!type.equals('user')) {
							throw new FacebookException('FacebookUser found object type '+type+' - expected user');
						}
					} else {
						System.debug(LoggingLevel.WARN, 'Root consuming unrecognized property: '+text);
						FacebookUtil.consumeObject(parser);
					}
				}
			}
		}
	}
	
	public FacebookUser(String accessToken, String id, Map<String, String> params) {
		this(System.JSON.createParser(FacebookUtil.get(accessToken, id, params)));
	}
	
	public FacebookUser(String accessToken, String id) {
		this(accessToken, id, null);
	}
	
	public class Work {
		public FacebookRef employer {get;set;}
		public FacebookRef location {get;set;}
		public FacebookRef position {get;set;}
		public String start_date {get;set;}
		public String end_date {get;set;}
		public List<Projects> projects {get;set;}

		public Work(JSONParser parser) {
			while (parser.nextToken() != JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != JSONToken.VALUE_NULL) {
						if (text == 'employer') {
							employer = new FacebookRef(parser);
						} else if (text == 'location') {
							location = new FacebookRef(parser);
						} else if (text == 'position') {
							position = new FacebookRef(parser);
						} else if (text == 'start_date') {
							start_date = parser.getText();
						} else if (text == 'end_date') {
							end_date = parser.getText();
						} else if (text == 'projects') {
							projects = new List<Projects>();
							while (parser.nextToken() != JSONToken.END_ARRAY) {
								projects.add(new Projects(parser));
							}
						} else {
							System.debug(LoggingLevel.WARN, 'Work consuming unrecognized property: '+text);
							FacebookUtil.consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public static FacebookUser parse(String json) {
		return new FacebookUser(System.JSON.createParser(json));
	}
	
	// This test method should give 100% coverage
	static testMethod void testParse() {
		String json = '{'+
		'  \"id\": \"1111111111\",'+
		'  \"name\": \"Some Text\",'+
		'  \"first_name\": \"Some Text\",'+
		'  \"middle_name\": \"Some Text\",'+
		'  \"last_name\": \"Some Text\",'+
		'  \"link\": \"https://www.facebook.com/\",'+
		'  \"username\": \"Some Text\",'+
		'  \"third_party_id\": \"1111111111\",'+
		'  \"birthday\": \"01/01/1911\",'+
		'  \"hometown\": {'+
		'    \"id\": \"1111111111\",'+
		'    \"name\": \"Some Text\"'+
		'  },'+
		'  \"interested_in\": ['+
		'    \"Some Text\"'+
		'  ],'+
		'  \"location\": {'+
		'    \"id\": \"1111111111\",'+
		'    \"name\": \"Some Text\"'+
		'  },'+
		'  \"bio\": \"Some Text\",'+
		'  \"quotes\": \"Some Text\",'+
		'  \"work\": ['+
		'    {'+
		'      \"employer\": {'+
		'        \"id\": \"113639868646473\",'+
		'        \"name\": \"Salesforce.com\"'+
		'      },'+
		'      \"location\": {'+
		'        \"id\": \"114952118516947\",'+
		'        \"name\": \"San Francisco, California\"'+
		'      },'+
		'      \"position\": {'+
		'        \"id\": \"1111111111\",'+
		'        \"name\": \"Some Text\"'+
		'      },'+
		'      \"start_date\": \"2001-03\",'+
		'      \"end_date\": \"0000-00\"'+
		'    },'+
		'    {'+
		'      \"employer\": {'+
		'        \"id\": \"1111111111\",'+
		'        \"name\": \"Some Text\"'+
		'      },'+
		'      \"location\": {'+
		'        \"id\": \"1111111111\",'+
		'        \"name\": \"Some Text\"'+
		'      },'+
		'      \"position\": {'+
		'        \"id\": \"1111111111\",'+
		'        \"name\": \"Some Text\"'+
		'      },'+
		'      \"start_date\": \"2001-01\",'+
		'      \"end_date\": \"2001-02\"'+
		'    }'+
		'  ],'+
		'  \"education\": ['+
		'    {'+
		'      \"school\": {'+
		'        \"id\": \"1111111111\",'+
		'        \"name\": \"Some Text\"'+
		'      },'+
		'      \"year\": {'+
		'        \"id\": \"1111111111\",'+
		'        \"name\": \"1911\"'+
		'      },'+
		'      \"type\": \"Some Text\"'+
		'    },'+
		'    {'+
		'      \"school\": {'+
		'        \"id\": \"1111111111\",'+
		'        \"name\": \"Some Text\"'+
		'      },'+
		'      \"year\": {'+
		'        \"id\": \"1111111111\",'+
		'        \"name\": \"1911\"'+
		'      },'+
		'      \"concentration\": ['+
		'        {'+
		'          \"id\": \"1111111111\",'+
		'          \"name\": \"Some Text\"'+
		'        }'+
		'      ],'+
		'      \"type\": \"Some Text\"'+
		'    },'+
		'    {'+
		'      \"school\": {'+
		'        \"id\": \"1111111111\",'+
		'        \"name\": \"Some Text\"'+
		'      },'+
		'      \"degree\": {'+
		'        \"id\": \"1111111111\",'+
		'        \"name\": \"Some Text\"'+
		'      },'+
		'      \"type\": \"Some Text\",'+
		'      \"classes\": ['+
		'        {'+
		'          \"id\": \"1111111111\",'+
		'          \"name\": \"Some Text\",'+
		'          \"with\": ['+
		'            {'+
		'              \"id\": \"1111111111\",'+
		'              \"name\": \"Some Text\"'+
		'            }'+
		'          ],'+
		'          \"description\": \"Some Text\"'+
		'        }'+
		'      ]'+
		'    }'+
		'  ],'+
		'  \"email\": \"a@b.com\",'+
		'  \"gender\": \"Some Text\",'+
		'  \"relationship_status\": \"Some Text\",'+
		'  \"significant_other\": {'+
		'    \"name\": \"Some Text\",'+
		'    \"id\": \"1111111111\"'+
		'  },'+
		'  \"religion\": \"Some Text\",'+
		'  \"political\": \"Some Text\",'+
		'  \"favorite_athletes\": ['+
		'    {'+
		'      \"id\": \"1111111111\",'+
		'      \"name\": \"Some Text\"'+
		'    }'+
		'  ],'+
		'  \"favorite_teams\": ['+
		'    {'+
		'      \"id\": \"1111111111\",'+
		'      \"name\": \"Some Text\"'+
		'    }'+
		'  ],'+
		'  \"website\": \"http://www.salesforce.com/\",'+
		'  \"timezone\": -8,'+
		'  \"locale\": \"en_US\",'+
		'  \"languages\": ['+
		'    {'+
		'      \"id\": \"106059522759137\",'+
		'      \"name\": \"English\"'+
		'    }'+
		'  ],'+
		'  \"verified\": true,'+
		'  \"updated_time\": \"2011-10-24T18:49:28+0000\",'+
		'  \"video_upload_limits\": {'+
		'    \"length\": 1234,'+
		'    \"size\": 5678'+
		'  },'+
		'  \"type\": \"user\"'+
		'}';
		FacebookUser r = parse(json);
		System.assert(r != null);
		System.assert(r.id != null);
		System.assert(r.name != null);
		System.assert(r.first_name != null);
		System.assert(r.middle_name != null);
		System.assert(r.last_name != null);
		System.assert(r.link != null);
		System.assert(r.username != null);
		System.assert(r.third_party_id != null);
		System.assert(r.birthday != null);
		System.assert(r.hometown != null);
		System.assert(r.interested_in != null);
		System.assert(r.location != null);
		System.assert(r.bio != null);
		System.assert(r.quotes != null);
		System.assert(r.work != null);
		System.assert(r.education != null);
		System.assert(r.email != null);
		System.assert(r.gender != null);
		System.assert(r.relationship_status != null);
		System.assert(r.significant_other != null);
		System.assert(r.religion != null);
		System.assert(r.political != null);
		System.assert(r.website != null);
		System.assert(r.timezone != null);
		System.assert(r.locale != null);
		System.assert(r.languages != null);
		System.assert(r.verified != null);
		System.assert(r.updated_time != null);
		System.assert(r.type != null);
		
		FacebookUtil.testmode = true;
		FacebookUtil.teststubresponse = json;
		r = new FacebookUser('TEST', 'TEST');
		System.assert(r != null);
		System.assert(r.id != null);
		System.assert(r.name != null);
		System.assert(r.first_name != null);
		System.assert(r.middle_name != null);
		System.assert(r.last_name != null);
		System.assert(r.link != null);
		System.assert(r.username != null);
		System.assert(r.third_party_id != null);
		System.assert(r.birthday != null);
		System.assert(r.hometown != null);
		System.assert(r.interested_in != null);
		System.assert(r.location != null);
		System.assert(r.bio != null);
		System.assert(r.quotes != null);
		System.assert(r.work != null);
		System.assert(r.education != null);
		System.assert(r.email != null);
		System.assert(r.gender != null);
		System.assert(r.relationship_status != null);
		System.assert(r.significant_other != null);
		System.assert(r.religion != null);
		System.assert(r.political != null);
		System.assert(r.website != null);
		System.assert(r.timezone != null);
		System.assert(r.locale != null);
		System.assert(r.languages != null);
		System.assert(r.verified != null);
		System.assert(r.updated_time != null);
		System.assert(r.type != null);

		json = '{\"type\": \"test\" }';
		try {
			FacebookUser objRoot = new FacebookUser(System.JSON.createParser(json));
			System.assert(false);
		} catch (FacebookException fbe) {
			System.assertEquals(fbe.getMessage(), 'FacebookUser found object type test - expected user');
		}

		json = '{\"TestAMissingObject\": { \"TestAMissingArray\": [ { \"TestAMissingProperty\": \"Some Value\" } ] } }';
		Projects objProjects = new Projects(System.JSON.createParser(json));
		System.assert(objProjects != null);
		System.assert(objProjects.id == null);
		System.assert(objProjects.name == null);
		System.assert(objProjects.with == null);
		System.assert(objProjects.description == null);
		System.assert(objProjects.start_date == null);
		System.assert(objProjects.end_date == null);

		json = '{\"TestAMissingObject\": { \"TestAMissingArray\": [ { \"TestAMissingProperty\": \"Some Value\" } ] } }';
		Education objEducation = new Education(System.JSON.createParser(json));
		System.assert(objEducation != null);
		System.assert(objEducation.school == null);
		System.assert(objEducation.year == null);
		System.assert(objEducation.type == null);
		System.assert(objEducation.concentration == null);
		System.assert(objEducation.degree == null);
		System.assert(objEducation.classes == null);

		json = '{\"TestAMissingObject\": { \"TestAMissingArray\": [ { \"TestAMissingProperty\": \"Some Value\" } ] } }';
		Classes objClasses = new Classes(System.JSON.createParser(json));
		System.assert(objClasses != null);
		System.assert(objClasses.id == null);
		System.assert(objClasses.name == null);
		System.assert(objClasses.with == null);
		System.assert(objClasses.description == null);

		json = '{\"TestAMissingObject\": { \"TestAMissingArray\": [ { \"TestAMissingProperty\": \"Some Value\" } ] } }';
		FacebookUser objRoot = new FacebookUser(System.JSON.createParser(json));
		System.assert(objRoot != null);
		System.assert(objRoot.id == null);
		System.assert(objRoot.name == null);
		System.assert(objRoot.first_name == null);
		System.assert(objRoot.middle_name == null);
		System.assert(objRoot.last_name == null);
		System.assert(objRoot.link == null);
		System.assert(objRoot.username == null);
		System.assert(objRoot.third_party_id == null);
		System.assert(objRoot.birthday == null);
		System.assert(objRoot.hometown == null);
		System.assert(objRoot.interested_in == null);
		System.assert(objRoot.location == null);
		System.assert(objRoot.bio == null);
		System.assert(objRoot.quotes == null);
		System.assert(objRoot.work == null);
		System.assert(objRoot.education == null);
		System.assert(objRoot.email == null);
		System.assert(objRoot.gender == null);
		System.assert(objRoot.relationship_status == null);
		System.assert(objRoot.significant_other == null);
		System.assert(objRoot.religion == null);
		System.assert(objRoot.political == null);
		System.assert(objRoot.website == null);
		System.assert(objRoot.timezone == null);
		System.assert(objRoot.locale == null);
		System.assert(objRoot.languages == null);
		System.assert(objRoot.verified == null);
		System.assert(objRoot.updated_time == null);
		System.assert(objRoot.type == null);

		json = '{\"TestAMissingObject\": { \"TestAMissingArray\": [ { \"TestAMissingProperty\": \"Some Value\" } ] } }';
		Work objWork = new Work(System.JSON.createParser(json));
		System.assert(objWork != null);
		System.assert(objWork.employer == null);
		System.assert(objWork.location == null);
		System.assert(objWork.position == null);
		System.assert(objWork.start_date == null);
		System.assert(objWork.end_date == null);
		System.assert(objWork.projects == null);

		json = '{\"TestAMissingObject\": { \"TestAMissingArray\": [ { \"TestAMissingProperty\": \"Some Value\" } ] } }';
		VideoUploadLimits objVideoUploadLimits = new VideoUploadLimits(System.JSON.createParser(json));
		System.assert(objVideoUploadLimits != null);
		System.assert(objVideoUploadLimits.length == null);
		System.assert(objVideoUploadLimits.size == null);	}
}